use std::str::FromStr;
use crate::lexer::*;
use crate::ast::*;
use crate::types::*;


grammar<'input>(input: &'input str);

pub Sex: Sexpr =
{
    "lDel" "rDel" => Sexpr::Atom(Type::Nil),
    "lDel" <lst: NonNilList> "rDel" => Sexpr::List(lst),
    "atom" => Sexpr::Atom(<>)
}

NonNilList: Vec<Sexpr> =
{
    Sex => vec![<>],
    <lst: NonNilList> <e: Sex> => {let mut l = lst; l.push(e); l}
}



extern {
    type Location = usize;
    type Error = LexicalError;
    
    enum Token{
        "atom" => Token::Atom(<Type>),
        "lDel" => Token::LDel,
        "rDel" => Token::RDel,
    }
}
